// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: akjFont.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "akjFont.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sdff {

namespace {

const ::google::protobuf::Descriptor* akjFont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  akjFont_reflection_ = NULL;
const ::google::protobuf::Descriptor* akjFont_charData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  akjFont_charData_reflection_ = NULL;
const ::google::protobuf::Descriptor* akjFont_vertexData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  akjFont_vertexData_reflection_ = NULL;
const ::google::protobuf::Descriptor* akjFont_kernData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  akjFont_kernData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_akjFont_2eproto() {
  protobuf_AddDesc_akjFont_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "akjFont.proto");
  GOOGLE_CHECK(file != NULL);
  akjFont_descriptor_ = file->message_type(0);
  static const int akjFont_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, fontname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, fontfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, texwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, texheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, scalefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, chars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, kernpairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, ddsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, fontfiledata_),
  };
  akjFont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      akjFont_descriptor_,
      akjFont::default_instance_,
      akjFont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(akjFont));
  akjFont_charData_descriptor_ = akjFont_descriptor_->nested_type(0);
  static const int akjFont_charData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_charData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_charData, indx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_charData, xoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_charData, yoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_charData, xadvance_),
  };
  akjFont_charData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      akjFont_charData_descriptor_,
      akjFont_charData::default_instance_,
      akjFont_charData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_charData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_charData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(akjFont_charData));
  akjFont_vertexData_descriptor_ = akjFont_descriptor_->nested_type(1);
  static const int akjFont_vertexData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_vertexData, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_vertexData, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_vertexData, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_vertexData, height_),
  };
  akjFont_vertexData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      akjFont_vertexData_descriptor_,
      akjFont_vertexData::default_instance_,
      akjFont_vertexData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_vertexData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_vertexData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(akjFont_vertexData));
  akjFont_kernData_descriptor_ = akjFont_descriptor_->nested_type(2);
  static const int akjFont_kernData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_kernData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_kernData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_kernData, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_kernData, b_),
  };
  akjFont_kernData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      akjFont_kernData_descriptor_,
      akjFont_kernData::default_instance_,
      akjFont_kernData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_kernData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(akjFont_kernData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(akjFont_kernData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_akjFont_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    akjFont_descriptor_, &akjFont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    akjFont_charData_descriptor_, &akjFont_charData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    akjFont_vertexData_descriptor_, &akjFont_vertexData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    akjFont_kernData_descriptor_, &akjFont_kernData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_akjFont_2eproto() {
  delete akjFont::default_instance_;
  delete akjFont_reflection_;
  delete akjFont_charData::default_instance_;
  delete akjFont_charData_reflection_;
  delete akjFont_vertexData::default_instance_;
  delete akjFont_vertexData_reflection_;
  delete akjFont_kernData::default_instance_;
  delete akjFont_kernData_reflection_;
}

void protobuf_AddDesc_akjFont_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rakjFont.proto\022\004sdff\"\373\003\n\007akjFont\022\020\n\010fon"
    "tName\030\001 \001(\t\022\024\n\014fontFileName\030\002 \001(\t\022\020\n\010tex"
    "Width\030\003 \001(\005\022\021\n\ttexHeight\030\004 \001(\005\022\016\n\006offset"
    "\030\005 \001(\021\022\023\n\013scaleFactor\030\006 \001(\002\022%\n\005chars\030\007 \003"
    "(\0132\026.sdff.akjFont.charData\022*\n\010vertices\030\010"
    " \003(\0132\030.sdff.akjFont.vertexData\022)\n\tkernPa"
    "irs\030\t \003(\0132\026.sdff.akjFont.kernData\022\017\n\007dds"
    "Data\030\n \001(\014\022\024\n\014fontFileData\030\013 \001(\014\032X\n\010char"
    "Data\022\n\n\002ID\030\001 \002(\005\022\014\n\004indx\030\002 \002(\005\022\017\n\007xOffse"
    "t\030\003 \002(\002\022\017\n\007yOffset\030\004 \002(\002\022\020\n\010xAdvance\030\005 \002"
    "(\002\032G\n\nvertexData\022\014\n\004xPos\030\001 \002(\002\022\014\n\004yPos\030\002"
    " \002(\002\022\r\n\005width\030\003 \002(\002\022\016\n\006height\030\004 \002(\002\0326\n\010k"
    "ernData\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001a\030\003 \001(\005"
    "\022\t\n\001b\030\004 \001(\005", 531);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "akjFont.proto", &protobuf_RegisterTypes);
  akjFont::default_instance_ = new akjFont();
  akjFont_charData::default_instance_ = new akjFont_charData();
  akjFont_vertexData::default_instance_ = new akjFont_vertexData();
  akjFont_kernData::default_instance_ = new akjFont_kernData();
  akjFont::default_instance_->InitAsDefaultInstance();
  akjFont_charData::default_instance_->InitAsDefaultInstance();
  akjFont_vertexData::default_instance_->InitAsDefaultInstance();
  akjFont_kernData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_akjFont_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_akjFont_2eproto {
  StaticDescriptorInitializer_akjFont_2eproto() {
    protobuf_AddDesc_akjFont_2eproto();
  }
} static_descriptor_initializer_akjFont_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int akjFont_charData::kIDFieldNumber;
const int akjFont_charData::kIndxFieldNumber;
const int akjFont_charData::kXOffsetFieldNumber;
const int akjFont_charData::kYOffsetFieldNumber;
const int akjFont_charData::kXAdvanceFieldNumber;
#endif  // !_MSC_VER

akjFont_charData::akjFont_charData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void akjFont_charData::InitAsDefaultInstance() {
}

akjFont_charData::akjFont_charData(const akjFont_charData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void akjFont_charData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  indx_ = 0;
  xoffset_ = 0;
  yoffset_ = 0;
  xadvance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

akjFont_charData::~akjFont_charData() {
  SharedDtor();
}

void akjFont_charData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void akjFont_charData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* akjFont_charData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return akjFont_charData_descriptor_;
}

const akjFont_charData& akjFont_charData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_akjFont_2eproto();
  return *default_instance_;
}

akjFont_charData* akjFont_charData::default_instance_ = NULL;

akjFont_charData* akjFont_charData::New() const {
  return new akjFont_charData;
}

void akjFont_charData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    indx_ = 0;
    xoffset_ = 0;
    yoffset_ = 0;
    xadvance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool akjFont_charData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_indx;
        break;
      }

      // required int32 indx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indx_)));
          set_has_indx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_xOffset;
        break;
      }

      // required float xOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xoffset_)));
          set_has_xoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yOffset;
        break;
      }

      // required float yOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yoffset_)));
          set_has_yoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_xAdvance;
        break;
      }

      // required float xAdvance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xAdvance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xadvance_)));
          set_has_xadvance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void akjFont_charData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 indx = 2;
  if (has_indx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->indx(), output);
  }

  // required float xOffset = 3;
  if (has_xoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xoffset(), output);
  }

  // required float yOffset = 4;
  if (has_yoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yoffset(), output);
  }

  // required float xAdvance = 5;
  if (has_xadvance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->xadvance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* akjFont_charData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 indx = 2;
  if (has_indx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->indx(), target);
  }

  // required float xOffset = 3;
  if (has_xoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xoffset(), target);
  }

  // required float yOffset = 4;
  if (has_yoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yoffset(), target);
  }

  // required float xAdvance = 5;
  if (has_xadvance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->xadvance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int akjFont_charData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 indx = 2;
    if (has_indx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indx());
    }

    // required float xOffset = 3;
    if (has_xoffset()) {
      total_size += 1 + 4;
    }

    // required float yOffset = 4;
    if (has_yoffset()) {
      total_size += 1 + 4;
    }

    // required float xAdvance = 5;
    if (has_xadvance()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void akjFont_charData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const akjFont_charData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const akjFont_charData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void akjFont_charData::MergeFrom(const akjFont_charData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_indx()) {
      set_indx(from.indx());
    }
    if (from.has_xoffset()) {
      set_xoffset(from.xoffset());
    }
    if (from.has_yoffset()) {
      set_yoffset(from.yoffset());
    }
    if (from.has_xadvance()) {
      set_xadvance(from.xadvance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void akjFont_charData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void akjFont_charData::CopyFrom(const akjFont_charData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool akjFont_charData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void akjFont_charData::Swap(akjFont_charData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(indx_, other->indx_);
    std::swap(xoffset_, other->xoffset_);
    std::swap(yoffset_, other->yoffset_);
    std::swap(xadvance_, other->xadvance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata akjFont_charData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = akjFont_charData_descriptor_;
  metadata.reflection = akjFont_charData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int akjFont_vertexData::kXPosFieldNumber;
const int akjFont_vertexData::kYPosFieldNumber;
const int akjFont_vertexData::kWidthFieldNumber;
const int akjFont_vertexData::kHeightFieldNumber;
#endif  // !_MSC_VER

akjFont_vertexData::akjFont_vertexData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void akjFont_vertexData::InitAsDefaultInstance() {
}

akjFont_vertexData::akjFont_vertexData(const akjFont_vertexData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void akjFont_vertexData::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

akjFont_vertexData::~akjFont_vertexData() {
  SharedDtor();
}

void akjFont_vertexData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void akjFont_vertexData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* akjFont_vertexData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return akjFont_vertexData_descriptor_;
}

const akjFont_vertexData& akjFont_vertexData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_akjFont_2eproto();
  return *default_instance_;
}

akjFont_vertexData* akjFont_vertexData::default_instance_ = NULL;

akjFont_vertexData* akjFont_vertexData::New() const {
  return new akjFont_vertexData;
}

void akjFont_vertexData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpos_ = 0;
    ypos_ = 0;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool akjFont_vertexData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float xPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_yPos;
        break;
      }

      // required float yPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // required float width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // required float height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void akjFont_vertexData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float xPos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xpos(), output);
  }

  // required float yPos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ypos(), output);
  }

  // required float width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // required float height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* akjFont_vertexData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float xPos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xpos(), target);
  }

  // required float yPos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ypos(), target);
  }

  // required float width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // required float height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int akjFont_vertexData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float xPos = 1;
    if (has_xpos()) {
      total_size += 1 + 4;
    }

    // required float yPos = 2;
    if (has_ypos()) {
      total_size += 1 + 4;
    }

    // required float width = 3;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required float height = 4;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void akjFont_vertexData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const akjFont_vertexData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const akjFont_vertexData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void akjFont_vertexData::MergeFrom(const akjFont_vertexData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void akjFont_vertexData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void akjFont_vertexData::CopyFrom(const akjFont_vertexData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool akjFont_vertexData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void akjFont_vertexData::Swap(akjFont_vertexData* other) {
  if (other != this) {
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata akjFont_vertexData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = akjFont_vertexData_descriptor_;
  metadata.reflection = akjFont_vertexData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int akjFont_kernData::kXFieldNumber;
const int akjFont_kernData::kYFieldNumber;
const int akjFont_kernData::kAFieldNumber;
const int akjFont_kernData::kBFieldNumber;
#endif  // !_MSC_VER

akjFont_kernData::akjFont_kernData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void akjFont_kernData::InitAsDefaultInstance() {
}

akjFont_kernData::akjFont_kernData(const akjFont_kernData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void akjFont_kernData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  a_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

akjFont_kernData::~akjFont_kernData() {
  SharedDtor();
}

void akjFont_kernData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void akjFont_kernData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* akjFont_kernData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return akjFont_kernData_descriptor_;
}

const akjFont_kernData& akjFont_kernData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_akjFont_2eproto();
  return *default_instance_;
}

akjFont_kernData* akjFont_kernData::default_instance_ = NULL;

akjFont_kernData* akjFont_kernData::New() const {
  return new akjFont_kernData;
}

void akjFont_kernData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    a_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool akjFont_kernData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_a;
        break;
      }

      // optional int32 a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_b;
        break;
      }

      // optional int32 b = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void akjFont_kernData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional int32 a = 3;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->a(), output);
  }

  // optional int32 b = 4;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* akjFont_kernData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional int32 a = 3;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->a(), target);
  }

  // optional int32 b = 4;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int akjFont_kernData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional int32 a = 3;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

    // optional int32 b = 4;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void akjFont_kernData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const akjFont_kernData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const akjFont_kernData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void akjFont_kernData::MergeFrom(const akjFont_kernData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void akjFont_kernData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void akjFont_kernData::CopyFrom(const akjFont_kernData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool akjFont_kernData::IsInitialized() const {

  return true;
}

void akjFont_kernData::Swap(akjFont_kernData* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata akjFont_kernData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = akjFont_kernData_descriptor_;
  metadata.reflection = akjFont_kernData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int akjFont::kFontNameFieldNumber;
const int akjFont::kFontFileNameFieldNumber;
const int akjFont::kTexWidthFieldNumber;
const int akjFont::kTexHeightFieldNumber;
const int akjFont::kOffsetFieldNumber;
const int akjFont::kScaleFactorFieldNumber;
const int akjFont::kCharsFieldNumber;
const int akjFont::kVerticesFieldNumber;
const int akjFont::kKernPairsFieldNumber;
const int akjFont::kDdsDataFieldNumber;
const int akjFont::kFontFileDataFieldNumber;
#endif  // !_MSC_VER

akjFont::akjFont()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void akjFont::InitAsDefaultInstance() {
}

akjFont::akjFont(const akjFont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void akjFont::SharedCtor() {
  _cached_size_ = 0;
  fontname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  texwidth_ = 0;
  texheight_ = 0;
  offset_ = 0;
  scalefactor_ = 0;
  ddsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontfiledata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

akjFont::~akjFont() {
  SharedDtor();
}

void akjFont::SharedDtor() {
  if (fontname_ != &::google::protobuf::internal::kEmptyString) {
    delete fontname_;
  }
  if (fontfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete fontfilename_;
  }
  if (ddsdata_ != &::google::protobuf::internal::kEmptyString) {
    delete ddsdata_;
  }
  if (fontfiledata_ != &::google::protobuf::internal::kEmptyString) {
    delete fontfiledata_;
  }
  if (this != default_instance_) {
  }
}

void akjFont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* akjFont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return akjFont_descriptor_;
}

const akjFont& akjFont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_akjFont_2eproto();
  return *default_instance_;
}

akjFont* akjFont::default_instance_ = NULL;

akjFont* akjFont::New() const {
  return new akjFont;
}

void akjFont::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fontname()) {
      if (fontname_ != &::google::protobuf::internal::kEmptyString) {
        fontname_->clear();
      }
    }
    if (has_fontfilename()) {
      if (fontfilename_ != &::google::protobuf::internal::kEmptyString) {
        fontfilename_->clear();
      }
    }
    texwidth_ = 0;
    texheight_ = 0;
    offset_ = 0;
    scalefactor_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_ddsdata()) {
      if (ddsdata_ != &::google::protobuf::internal::kEmptyString) {
        ddsdata_->clear();
      }
    }
    if (has_fontfiledata()) {
      if (fontfiledata_ != &::google::protobuf::internal::kEmptyString) {
        fontfiledata_->clear();
      }
    }
  }
  chars_.Clear();
  vertices_.Clear();
  kernpairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool akjFont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fontName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fontname().data(), this->fontname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fontFileName;
        break;
      }

      // optional string fontFileName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fontfilename().data(), this->fontfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_texWidth;
        break;
      }

      // optional int32 texWidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_texWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texwidth_)));
          set_has_texwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_texHeight;
        break;
      }

      // optional int32 texHeight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_texHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texheight_)));
          set_has_texheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // optional sint32 offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_scaleFactor;
        break;
      }

      // optional float scaleFactor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalefactor_)));
          set_has_scalefactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chars;
        break;
      }

      // repeated .sdff.akjFont.charData chars = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chars;
        if (input->ExpectTag(66)) goto parse_vertices;
        break;
      }

      // repeated .sdff.akjFont.vertexData vertices = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vertices;
        if (input->ExpectTag(74)) goto parse_kernPairs;
        break;
      }

      // repeated .sdff.akjFont.kernData kernPairs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernPairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kernpairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kernPairs;
        if (input->ExpectTag(82)) goto parse_ddsData;
        break;
      }

      // optional bytes ddsData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ddsData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ddsdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_fontFileData;
        break;
      }

      // optional bytes fontFileData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontFileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fontfiledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void akjFont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fontName = 1;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fontname().data(), this->fontname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fontname(), output);
  }

  // optional string fontFileName = 2;
  if (has_fontfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fontfilename().data(), this->fontfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fontfilename(), output);
  }

  // optional int32 texWidth = 3;
  if (has_texwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->texwidth(), output);
  }

  // optional int32 texHeight = 4;
  if (has_texheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->texheight(), output);
  }

  // optional sint32 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->offset(), output);
  }

  // optional float scaleFactor = 6;
  if (has_scalefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scalefactor(), output);
  }

  // repeated .sdff.akjFont.charData chars = 7;
  for (int i = 0; i < this->chars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chars(i), output);
  }

  // repeated .sdff.akjFont.vertexData vertices = 8;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vertices(i), output);
  }

  // repeated .sdff.akjFont.kernData kernPairs = 9;
  for (int i = 0; i < this->kernpairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kernpairs(i), output);
  }

  // optional bytes ddsData = 10;
  if (has_ddsdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->ddsdata(), output);
  }

  // optional bytes fontFileData = 11;
  if (has_fontfiledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->fontfiledata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* akjFont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fontName = 1;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fontname().data(), this->fontname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fontname(), target);
  }

  // optional string fontFileName = 2;
  if (has_fontfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fontfilename().data(), this->fontfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fontfilename(), target);
  }

  // optional int32 texWidth = 3;
  if (has_texwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->texwidth(), target);
  }

  // optional int32 texHeight = 4;
  if (has_texheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->texheight(), target);
  }

  // optional sint32 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->offset(), target);
  }

  // optional float scaleFactor = 6;
  if (has_scalefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scalefactor(), target);
  }

  // repeated .sdff.akjFont.charData chars = 7;
  for (int i = 0; i < this->chars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chars(i), target);
  }

  // repeated .sdff.akjFont.vertexData vertices = 8;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vertices(i), target);
  }

  // repeated .sdff.akjFont.kernData kernPairs = 9;
  for (int i = 0; i < this->kernpairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->kernpairs(i), target);
  }

  // optional bytes ddsData = 10;
  if (has_ddsdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->ddsdata(), target);
  }

  // optional bytes fontFileData = 11;
  if (has_fontfiledata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->fontfiledata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int akjFont::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fontName = 1;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontname());
    }

    // optional string fontFileName = 2;
    if (has_fontfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontfilename());
    }

    // optional int32 texWidth = 3;
    if (has_texwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texwidth());
    }

    // optional int32 texHeight = 4;
    if (has_texheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texheight());
    }

    // optional sint32 offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->offset());
    }

    // optional float scaleFactor = 6;
    if (has_scalefactor()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bytes ddsData = 10;
    if (has_ddsdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ddsdata());
    }

    // optional bytes fontFileData = 11;
    if (has_fontfiledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fontfiledata());
    }

  }
  // repeated .sdff.akjFont.charData chars = 7;
  total_size += 1 * this->chars_size();
  for (int i = 0; i < this->chars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chars(i));
  }

  // repeated .sdff.akjFont.vertexData vertices = 8;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .sdff.akjFont.kernData kernPairs = 9;
  total_size += 1 * this->kernpairs_size();
  for (int i = 0; i < this->kernpairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kernpairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void akjFont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const akjFont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const akjFont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void akjFont::MergeFrom(const akjFont& from) {
  GOOGLE_CHECK_NE(&from, this);
  chars_.MergeFrom(from.chars_);
  vertices_.MergeFrom(from.vertices_);
  kernpairs_.MergeFrom(from.kernpairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fontname()) {
      set_fontname(from.fontname());
    }
    if (from.has_fontfilename()) {
      set_fontfilename(from.fontfilename());
    }
    if (from.has_texwidth()) {
      set_texwidth(from.texwidth());
    }
    if (from.has_texheight()) {
      set_texheight(from.texheight());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_scalefactor()) {
      set_scalefactor(from.scalefactor());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_ddsdata()) {
      set_ddsdata(from.ddsdata());
    }
    if (from.has_fontfiledata()) {
      set_fontfiledata(from.fontfiledata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void akjFont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void akjFont::CopyFrom(const akjFont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool akjFont::IsInitialized() const {

  for (int i = 0; i < chars_size(); i++) {
    if (!this->chars(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vertices_size(); i++) {
    if (!this->vertices(i).IsInitialized()) return false;
  }
  return true;
}

void akjFont::Swap(akjFont* other) {
  if (other != this) {
    std::swap(fontname_, other->fontname_);
    std::swap(fontfilename_, other->fontfilename_);
    std::swap(texwidth_, other->texwidth_);
    std::swap(texheight_, other->texheight_);
    std::swap(offset_, other->offset_);
    std::swap(scalefactor_, other->scalefactor_);
    chars_.Swap(&other->chars_);
    vertices_.Swap(&other->vertices_);
    kernpairs_.Swap(&other->kernpairs_);
    std::swap(ddsdata_, other->ddsdata_);
    std::swap(fontfiledata_, other->fontfiledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata akjFont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = akjFont_descriptor_;
  metadata.reflection = akjFont_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdff

// @@protoc_insertion_point(global_scope)
